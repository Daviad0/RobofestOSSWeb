@model RobofestWTE.Models.RoundEntry

@{
    ViewBag.Title = "Edit";
}
<style>
    .btn-group {
        display: flex;
    }

    .btn {
        flex: 1;
        transition: 0.3s;
    }

    btn-default: {
        background-color: gray
    }

    btn-warning:focus, btn-warning:hover, btn-warning:active {
        background-color: #bd7d24;
    }

    .big {
        font-size: 1.2em;
        border: none;
        border-radius: 4px;
    }

    .createforms {
        border: none;
        border-bottom: 2px solid gray;
        padding-left: 2px;
        transition: 0.3s;
        border-radius: 4px;
    }

        .createforms:hover {
            background-color: #ededed;
            padding-left: 5px;
        }

        .createforms:focus {
            border-bottom: 2px solid red;
            background-color: #ededed;
            padding-left: 5px;
        }

        .createforms:disabled, .createforms:read-only {
            cursor: not-allowed;
            padding-left: 2px;
            transition: 0.3s;
        }

            .createforms:disabled:hover, .createforms:disabled:active {
                cursor: not-allowed;
                background-color: red;
                padding-left: 5px;
                opacity: 0.6;
            }
</style>
@{var timeStamp = DateTime.UtcNow; }

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal" style="text-align:center">
        <h2>Round Edit</h2>
        <h4>Original Values:</h4>
        <p>Round: (@Model.Round)</p>
        <p>Score: (@Model.Score)</p>
        <p>Time: (@Model.Time)</p>
        <p>Data: (@Model.Data)</p>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.TeamID)
        @Html.HiddenFor(model => model.EntryID)


        <div style="display:flex; flex-direction: row; justify-content: center; align-items: center;padding-bottom:10px">
            @Html.LabelFor(model => model.EntryID, htmlAttributes: new { @class = "control-label col-md-2" })
            @Html.TextBoxFor(model => model.EntryID, new { @class = "createforms", @disabled = "disabled" })
        </div>

        <div style="display:flex; flex-direction: row; justify-content: center; align-items: center;padding-bottom:10px">
            @Html.LabelFor(model => model.TeamID, htmlAttributes: new { @class = "control-label col-md-2" })
            @Html.TextBoxFor(model => model.TeamID, new { @class = "createforms", @disabled = "disabled" })
        </div>

        <div style="display:flex; flex-direction: row; justify-content: center; align-items: center;padding-bottom:10px">
            @Html.LabelFor(model => model.TimeStamp, htmlAttributes: new { @class = "control-label col-md-2" })
            @Html.TextBoxFor(model => model.TimeStamp, new { @Value = timeStamp, @class = "createforms", @readonly = "readonly" })
        </div>

        <div style="display:flex; flex-direction: row; justify-content: center; align-items: center;padding-bottom:10px">
            @Html.LabelFor(model => model.Score, htmlAttributes: new { @class = "control-label col-md-2" })
            @Html.TextBoxFor(model => model.Score, new { id = "teamID", @class = "createforms" })
        </div>
        @Html.ValidationMessageFor(model => model.Score, "", new { @class = "text-danger" })

        <div style="display:flex; flex-direction: row; justify-content: center; align-items: center;padding-bottom:10px">
            @Html.LabelFor(model => model.Time, htmlAttributes: new { @class = "control-label col-md-2" })
            @Html.TextBoxFor(model => model.Time, new { @class = "createforms" })
        </div>
        @Html.ValidationMessageFor(model => model.Time, "", new { @class = "text-danger" })

        <div style="display:flex; flex-direction: row; justify-content: center; align-items: center;padding-bottom:10px">
            @Html.LabelFor(model => model.Round, htmlAttributes: new { @class = "control-label col-md-2" })
            @Html.TextBoxFor(model => model.Round, new { @class = "createforms" })
        </div>
        @Html.ValidationMessageFor(model => model.Round, "", new { @class = "text-danger" })

        <div style="display:flex; flex-direction: row; justify-content: center; align-items: center;padding-bottom:10px">
            @Html.LabelFor(model => model.Data, htmlAttributes: new { @class = "control-label col-md-2" })
            @Html.TextBoxFor(model => model.Data, new { id = "data", @class = "createforms", @readonly = "readonly" })
        </div>
        @Html.ValidationMessageFor(model => model.Data, "", new { @class = "text-danger" })
        <div style="display:flex; flex-direction: row; justify-content: center; align-items: center;padding-bottom:10px">
            @Html.LabelFor(model => model.Rerun, htmlAttributes: new { @class = "control-label col-md-2" })
            @Html.CheckBoxFor(model => model.Rerun, new { @class = "createforms" })
        </div>
        @Html.ValidationMessageFor(model => model.Rerun, "", new { @class = "text-danger" })
        <div style="display:flex; flex-direction: row; justify-content: center; align-items: center;padding-bottom:10px">
            @Html.LabelFor(model => model.Usable, htmlAttributes: new { @class = "control-label col-md-2" })
            @Html.CheckBoxFor(model => model.Usable, new { @class = "createforms" })
        </div>
        @Html.ValidationMessageFor(model => model.Usable, "", new { @class = "text-danger" })
        <div style="display:flex; flex-direction: row; justify-content: center; align-items: center;padding-bottom:10px">
            @Html.LabelFor(model => model.JudgeConfirmNotes, htmlAttributes: new { @class = "control-label col-md-2" })
            @Html.TextBoxFor(model => model.JudgeConfirmNotes, new { @class = "createforms" })
        </div>
        @Html.ValidationMessageFor(model => model.JudgeConfirmNotes, "", new { @class = "text-danger" })
        <div style="display:flex; flex-direction: row; justify-content: center; align-items: center;padding-bottom:10px">
            @Html.LabelFor(model => model.StudentInitials, htmlAttributes: new { @class = "control-label col-md-2" })
            @Html.TextBoxFor(model => model.StudentInitials, new { @class = "createforms" })
        </div>
        @Html.ValidationMessageFor(model => model.StudentInitials, "", new { @class = "text-danger" })
        <div style="display:flex; flex-direction: row; justify-content: center; align-items: center;padding-bottom:10px">
            <input type="submit" value="Save" class="btn btn-default" />
        </div>


    </div>
}
@{
    var groups = Model.Data.Split('^');
    var datag0 = groups[0].Split('/');
    var datag1 = groups[1].Split('/');
    var datag2 = groups[2].Split('/');
    var datag3 = groups[3].Split('/');

    int bot1 = Int32.Parse(datag0[0]);
    int bot2 = Int32.Parse(datag0[1]);
    int bot3 = Int32.Parse(datag0[2]);
    int bot4 = Int32.Parse(datag0[3]);
    int bot5 = Int32.Parse(datag0[4]);

    int wgb = Int32.Parse(datag1[0]);
    int ogb = Int32.Parse(datag1[1]);
    int igb = Int32.Parse(datag1[2]);
    int rgb = Int32.Parse(datag1[3]);

    int gem = Int32.Parse(datag2[0]);
    int stu = Int32.Parse(datag2[1]);

    int reset = Int32.Parse(datag3[0]);

}
<script src="~/Scripts/jquery-3.3.1.js" integrity="" crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>
<h2 style="text-align:center">Scoresheet</h2>
<h4 style="text-align:center">(!) This area automatically fills in the "Score" field for convience every time you change the scoresheet (!)</h4>
<h5 style="text-align:center">Balls into Hole Slot: <span id="balls">0</span> Ball(s)</h5>
<h5 id="bvalidation" style="text-align:center;color:darkred"></h5>
<h5 id="ivalidation" style="text-align:center;color:darkred"></h5>
<br />
<div style="background-color:lightgray;border-radius:6px;border:10px solid lightgray;z-index:-1">
    <table style="border:none;width:100%;text-align:center">
        <tr style="text-align:center">
            <th>Bottle #1 (Left)</th>
            <th>Bottle #2</th>
            <th>Bottle #3</th>
            <th>Bottle #4 (Right)</th>
            <th>Bottle #5 (Middle)</th>
        </tr>
        <tr>
            <td>
                <select onchange="OnChangeB1(this.value)" id="score" class="bottle1 custom-dropdown big">
                    <option name="bot1" id="bot" value="0">In Circle (0)</option>
                    <option name="bot1" id="bot" value="3">Moved Out (3)</option>
                    <option name="bot1" id="bot" value="11">Knocked Over (11)</option>
                </select>
            </td>
            <td>
                <select onchange="OnChangeB2(this.value)" id="score" class="bottle2 custom-dropdown big">
                    <option name="bot2" id="bot" value="0">In Circle (0)</option>
                    <option name="bot2" id="bot" value="5">Moved Out (5)</option>
                    <option name="bot2" id="bot" value="13">Knocked Over (13)</option>
                </select>
            </td>
            <td>
                <select onchange="OnChangeB3(this.value)" id="score" class="bottle3 custom-dropdown big">
                    <option name="bot3" id="bot" value="0">In Circle (0)</option>
                    <option name="bot3" id="bot" value="5">Moved Out (5)</option>
                    <option name="bot3" id="bot" value="13">Knocked Over (13)</option>
                </select>
            </td>
            <td>
                <select onchange="OnChangeB4(this.value)" id="score" class="bottle4 custom-dropdown big">
                    <option name="bot4" id="bot" value="0">In Circle (0)</option>
                    <option name="bot4" id="bot" value="3">Moved Out (3)</option>
                    <option name="bot4" id="bot" value="11">Knocked Over (11)</option>
                </select>
            </td>
            <td>
                <select onchange="OnChangeB5(this.value)" id="score" class="bottle5 custom-dropdown big">
                    <option name="bot5" id="bot" value="0">In Circle (0)</option>
                    <option name="bot5" id="bot" value="-2">Moved Out (-2)</option>
                    <option name="bot5" id="bot" value="-2">Knocked Over (-2)</option>
                </select>
            </td>
        </tr>
    </table>

</div>
<br />
<div style="background-color:lightgray;border-radius:6px;border:10px solid lightgray;z-index:-1">
    <table style="border:none;width:100%;text-align:center">
        <tr style="text-align:center">
            <th>While Golf Balls</th>
            <th>Orange Golf Balls</th>
            <th>Invalid Balls</th>
            <th>Remaining Balls</th>
        </tr>
        <tr>
            <td>
                <select onchange="OnChangeWB(this.value)" id="score" class="whiteb custom-dropdown big">
                    <option name="wgb" id="gb" value="0">No Golf Balls (0)</option>
                    <option name="wgb" id="gb" value="15">One Golf Ball (15)</option>
                    <option name="wgb" id="gb" value="30">Two Golf Balls (30)</option>
                    <option name="wgb" id="gb" value="45">Three Golf Balls (45)</option>
                </select>
            </td>
            <td>
                <select onchange="OnChangeOB(this.value)" id="score" class="orangeb custom-dropdown big">
                    <option name="ogb" id="gb" value="0">No Golf Balls (0)</option>
                    <option name="ogb" id="gb" value="18">One Golf Ball (18)</option>
                    <option name="ogb" id="gb" value="36">Two Golf Balls (36)</option>
                </select>
            </td>
            <td>
                <select onchange="OnChangeIB(this.value)" id="score" class="invalidb custom-dropdown big">
                    <option name="igb" id="gb" value="0">No Balls (0)</option>
                    <option name="igb" id="gb" value="-3">One Ball (-3)</option>
                    <option name="igb" id="gb" value="-6">Two Balls (-6)</option>
                    <option name="igb" id="gb" value="-9">Three Balls (-9)</option>
                    <option name="igb" id="gb" value="-12">Four Balls (-12)</option>
                    <option name="igb" id="gb" value="-15">Five Balls (-15)</option>
                </select>
            </td>
            <td>
                <select onchange="OnChangeRB(this.value)" id="score" class="remainb custom-dropdown big">
                    <option name="rgb" id="gb" value="5">No Balls Left (5)</option>
                    <option name="rgb" id="gb" value="4">One Ball Left (4)</option>
                    <option name="rgb" id="gb" value="3">Two Balls Left (3)</option>
                    <option name="rgb" id="gb" value="2">Three Balls Left (2)</option>
                    <option name="rgb" id="gb" value="1">Four Balls Left (1)</option>
                    <option name="rgb" id="gb" value="0">Five Balls Left (0)</option>
                </select>
            </td>
        </tr>
    </table>

</div>
<br />
<div style="background-color:lightgray;border-radius:6px;border:10px solid lightgray;z-index:-1">
    <table style="border:none;width:100%;text-align:center">
        <tr style="text-align:center">
            <th>Game Ending Mission</th>
            <th>Robot Stayed Sturdy</th>
        </tr>
        <tr>
            <td>
                <select onchange="OnChangeBS4(this.value)" id="score" class="extra1 custom-dropdown big">
                    <option name="gem" id="bs" value="0">Mission Failed (0)</option>
                    <option name="gem" id="bs" value="12">Mission Completed (12)</option>
                </select>
            </td>
            <td>
                <select onchange="OnChangeBS3(this.value)" id="score" class="extra2 custom-dropdown big">
                    <option name="str" id="bs" value="0">Not Sturdy (0)</option>
                    <option name="str" id="bs" value="2">Sturdy (2)</option>
                </select>
            </td>
        </tr>
    </table>

</div>
<br />
<div style="background-color:lightgray;border-radius:6px;border:10px solid lightgray;z-index:-1">
    <table style="border:none;width:100%;text-align:center">
        <tr style="text-align:center">
            <th>Full Reset</th>
        </tr>
        <tr>
            <td>
                <select onchange="OnChangeBS4(this.value)" id="score" class="penalty1 custom-dropdown big">
                    <option name="frs" id="bs" value="0">No Reset Done (0)</option>
                    <option name="frs" id="bs" value="-3">Full Reset Done (-3)</option>
                </select>
            </td>
        </tr>
    </table>

</div>
<script src="~/lib/signalr/dist/browser/signalr.js"></script>
<script src="~/lib/jquery/dist/jquery.js"></script>
<br />
<script>
     $(".bottle1").val(@bot1).attr("selected", "selected");
     $(".bottle2").val(@bot2).attr("selected", "selected");
     $(".bottle3").val(@bot3).attr("selected", "selected");
     $(".bottle4").val(@bot4).attr("selected", "selected");
     $(".bottle5").val(@bot5).attr("selected", "selected");
     $(".whiteb").val(@wgb).attr("selected", "selected");
     $(".orangeb").val(@ogb).attr("selected", "selected");
     $(".invalidb").val(@igb).attr("selected", "selected");
     $(".remainb").val(@rgb).attr("selected", "selected");
     $(".extra1").val(@gem).attr("selected", "selected");
     $(".extra2").val(@stu).attr("selected", "selected");
     $(".penalty1").val(@reset).attr("selected", "selected");
</script>
<script>
    $(document).on('change', '#score', function () {
        var total = 0;
        var bot1 = 0;
        var bot2 = 0;
        var bot3 = 0;
        var bot4 = 0;
        var bot5 = 0;
        var wgb = 0;
        var ogb = 0;
        var igb = 0;
        var rgb = 0;
        var ex1 = 0;
        var ex2 = 0;
        var pe1 = 0;
        var pe2 = 0;
        var scoredballs = 0;
        var invalidballs = 0;
        var remainingballs = 5;
        var stacked = false;
        var allowedsb = false;
        $('.bottle1').each(function () {
            total += parseFloat($(this).val());
            bot1 += parseFloat($(this).val());
        });
        $('.bottle2').each(function () {
            total += parseFloat($(this).val());
            bot2 += parseFloat($(this).val());
        });
        $('.bottle3').each(function () {
            total += parseFloat($(this).val());
            bot3 += parseFloat($(this).val());
        });
        $('.bottle4').each(function () {
            total += parseFloat($(this).val());
            bot4 += parseFloat($(this).val());
        });
        $('.bottle5').each(function () {
            total += parseFloat($(this).val());
            bot5 += parseFloat($(this).val());
        });
        $('.whiteb').each(function () {
            total += parseFloat($(this).val());
            wgb += parseFloat($(this).val());
            scoredballs += (parseFloat($(this).val()) / 15);
        });
        $('.orangeb').each(function () {
            total += parseFloat($(this).val());
            ogb += parseFloat($(this).val());
            scoredballs += (parseFloat($(this).val()) / 18);
        });
        $('.invalidb').each(function () {
            total += parseFloat($(this).val());
            igb += parseFloat($(this).val());
            invalidballs += (parseFloat($(this).val()) / -3);
        });
        $('.remainb').each(function () {
            total += parseFloat($(this).val());
            rgb += parseFloat($(this).val());
            remainingballs -= parseFloat($(this).val());
        });
        $('.extra1').each(function () {
            total += parseFloat($(this).val());
            ex1 += parseFloat($(this).val());
        });
        $('.extra2').each(function () {
            total += parseFloat($(this).val());
            ex2 += parseFloat($(this).val());
        });
        $('.penalty1').each(function () {
            total += parseFloat($(this).val());
            pe1 += parseFloat($(this).val());
        });
        $('#teamID').val(total)
        var datastring = bot1 + "/" + bot2 + "/" + bot3 + "/" + bot4 + "/" + bot5 + "^" + wgb + "/" + ogb + "/" + igb + "/" + rgb + "^" + ex1 + "/" + ex2 + "^" + pe1 + "/" + pe2;
        $("#data").val(datastring);
        $("#balls").html(scoredballs);
        var enable = true;
        if (invalidballs > scoredballs) {
            $("#ivalidation").html("There are more invalid balls than there are in the hole slot! Remember, a ball is only counted invalid if it is hit into the hole slot!")
            enable = false;
        } else {
            $("#ivalidation").html("")
        }
        if ((remainingballs + scoredballs) > 5) {
            $("#bvalidation").html("There are more than 5 balls counted on the scoring sheet. Please adjust your 'REMAINING BALLS' counter!")
            enable = false;
        } else {
            $("#bvalidation").html("")
        }
        if (enable == true) {
            $("#create").attr("disabled", false);
        } else {
            $("#create").attr("disabled", true);
        }
    });
</script>
<br />

<script type="text/javascript">
    $(":radio").on("change", function () {
        //Block Stack
        var subtotalbs = 0;
        $(":radio[id='bs']:checked").each(function () {
            subtotalbs += Number(this.value);
        });
        $("#subtotalbs").text(subtotalbs);
        //Stack
        var subtotalstack = 0;
        $(":radio[id='stack']:checked").each(function () {
            subtotalstack += Number(this.value);
        });
        $("#subtotalstack").text(subtotalstack);
        //Extra
        var subtotalextra = 0;
        $(":radio[id='extra']:checked").each(function () {
            subtotalextra += Number(this.value);
        });
        $("#subtotalextra").text(subtotalextra);
        //Penalty
        var subtotalpenalty = 0;
        $(":radio[id='penalty']:checked").each(function () {
            subtotalpenalty += Number(this.value);
        });
        $("#subtotalpenalty").text(subtotalpenalty);
        //Total
        var total = 0;
        $(":radio:checked").each(function () {
            total += Number(this.value);
        });
        $("#total").text(total);
        $("#teamID").val(total);
        $("#teamIDcopy").text(total);
        var description = subtotalbs + "/" + subtotalstack + "/" + subtotalextra + "/" + subtotalpenalty;
        $("#data").val(description);
    });

</script>